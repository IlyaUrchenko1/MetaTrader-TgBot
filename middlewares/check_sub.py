from typing import Any, Awaitable, Callable, Dict, Union

from aiogram import BaseMiddleware, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.constants import ADMIN_IDS


class CheckSubscriptionMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        """
        super().__init__()
        self.bot = bot
        self.channel_id = -1002409743489
        self.channel_username = "AraStarsCommunity"
        self.allowed_statuses = ["member", "administrator", "creator"]
        
    async def __call__(
        self,
        handler,
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id
        
        if user_id in ADMIN_IDS:
            return await handler(event, data)
        
        is_subscribed = await self._check_subscription(user_id)
        if is_subscribed:
            return await handler(event, data)
        
        await self._send_subscription_notification(event)
        return None
    
    async def _check_subscription(self, user_id: int) -> bool:
        try:
            member = await self.bot.get_chat_member(chat_id=self.channel_id, user_id=user_id)
            return member.status in self.allowed_statuses
        except Exception:
            return False
    
    async def _send_subscription_notification(self, event: Union[Message, CallbackQuery]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
        """
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
            url=f"t.me/{self.channel_username}"
        )
        
        notification_text = "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ /start"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, CallbackQuery):
            await event.answer()
            await event.message.answer(
                notification_text,
                reply_markup=builder.as_markup()
            )
        else:
            await event.answer(
                notification_text,
                reply_markup=builder.as_markup()
            )
