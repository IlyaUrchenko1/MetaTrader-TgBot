from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.database import Database
from utils.constants import BOT_USERNAME
from keyboards.keyboards import (
    get_profile_keyboard, 
    get_settings_keyboard, 
    get_main_inline_keyboard, 
    get_back_keyboard,
    get_back_keyboard_profile
)

router = Router()
db = Database()

class SettingsState(StatesGroup):
    waiting_for_symbol = State()
    waiting_for_lot = State()
    waiting_for_distance = State()
    waiting_for_trailing = State()
    waiting_for_drawdown = State()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    profile = db.get_user_profile(user_id)
    
    if not profile:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        return
    
    referral_stats = db.get_referral_stats(user_id)
    
    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profile['successful_trades']}\n"
        f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profile['failed_trades']}\n"
        f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {profile['total_profit']:.2f}\n\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {referral_stats['total_referrals']}\n"
        f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {profile['referral_earnings']:.2f}\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"https://t.me/{BOT_USERNAME}?start={user_id}"
    )
    
    await callback.message.edit_text(text, reply_markup=get_profile_keyboard())
    await callback.answer()

@router.callback_query(F.data == "referrals")
async def show_referrals(callback: CallbackQuery):
    user_id = callback.from_user.id
    referral_stats = db.get_referral_stats(user_id)
    
    if referral_stats['total_referrals'] == 0:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
    else:
        text = (
            f"üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_stats['total_referrals']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_stats['active_referrals']}\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
        )
    
    await callback.message.edit_text(text, reply_markup=get_back_keyboard_profile())
    await callback.answer()

@router.callback_query(F.data == "stats")
async def show_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    profile = db.get_user_profile(user_id)
    
    if not profile:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    total_trades = profile['successful_trades'] + profile['failed_trades']
    winrate = (profile['successful_trades'] / total_trades * 100) if total_trades > 0 else 0
    avg_profit = (profile['total_profit'] / profile['successful_trades']) if profile['successful_trades'] > 0 else 0
    
    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profile['successful_trades']}\n"
        f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profile['failed_trades']}\n"
        f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {winrate:.2f}%\n"
        f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {profile['total_profit']:.2f}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {avg_profit:.2f}\n"
    )
    
    await callback.message.edit_text(text, reply_markup=get_back_keyboard_profile())
    await callback.answer()

@router.callback_query(F.data == "ref_link")
async def copy_ref_link(callback: CallbackQuery):
    user_id = callback.from_user.id
    ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    
    text = (
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"{ref_link}\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
    )
    
    await callback.message.edit_text(text, reply_markup=get_back_keyboard_profile())

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    user_id = callback.from_user.id
    profile = db.get_user_profile(user_id)
    
    if not profile:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return
    
    settings = profile['settings']
    text = (
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"üìà –°–∏–º–≤–æ–ª: {settings['symbol']}\n"
        f"üí∞ –õ–æ—Ç: {settings['lot']}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {settings['distance_pips']}\n"
        f"üéØ –¢—Ä–µ–π–ª–∏–Ω–≥: {settings['trailing_distance']}\n"
        f"‚ö†Ô∏è –ü—Ä–æ—Å–∞–¥–∫–∞: {settings['max_drawdown_pct']}%"
    )
    
    await callback.message.edit_text(text, reply_markup=get_settings_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("setting_"))
async def setting_selected(callback: CallbackQuery, state: FSMContext):
    setting_type = callback.data.split("_")[1]
    await state.set_state(getattr(SettingsState, f"waiting_for_{setting_type}"))
    await state.update_data(message_id=callback.message.message_id)
    
    messages = {
        "symbol": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, EURUSD, BTCUSD):",
        "lot": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ (–æ—Ç 0.01 –¥–æ 100):",
        "distance": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∏–ø—Å–∞—Ö (–æ—Ç 1 –¥–æ 1000):",
        "trailing": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ (–æ—Ç 1 –¥–æ 100):",
        "drawdown": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏ (–æ—Ç 1 –¥–æ 100%):"
    }
    
    text = messages.get(setting_type, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {setting_type}:")
    
    await callback.message.edit_text(text, reply_markup=get_back_keyboard())
    await callback.answer()

@router.message(SettingsState.waiting_for_symbol)
async def process_symbol(message: Message, state: FSMContext):
    symbol = message.text.upper()
    user_id = message.from_user.id
    
    if db.update_user_settings(user_id, {"symbol": symbol}):
        await message.answer("‚úÖ –°–∏–º–≤–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        await show_updated_settings(message, user_id, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–∞")
        await state.clear()

@router.message(SettingsState.waiting_for_lot)
async def process_lot(message: Message, state: FSMContext):
    try:
        lot = float(message.text)
        user_id = message.from_user.id
        
        if 0.01 <= lot <= 100:
            if db.update_user_settings(user_id, {"lot": lot}):
                await message.answer("‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                await show_updated_settings(message, user_id, state)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞")
                await state.clear()
        else:
            await message.answer("‚ùå –õ–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.01 –¥–æ 100")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        await state.clear()

@router.message(SettingsState.waiting_for_distance)
async def process_distance(message: Message, state: FSMContext):
    try:
        distance = int(message.text)
        user_id = message.from_user.id
        
        if 1 <= distance <= 1000:
            if db.update_user_settings(user_id, {"distance_pips": distance}):
                await message.answer("‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                await show_updated_settings(message, user_id, state)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è")
                await state.clear()
        else:
            await message.answer("‚ùå –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        await state.clear()

@router.message(SettingsState.waiting_for_trailing)
async def process_trailing(message: Message, state: FSMContext):
    try:
        trailing = int(message.text)
        user_id = message.from_user.id
        
        if 1 <= trailing <= 100:
            if db.update_user_settings(user_id, {"trailing_distance": trailing}):
                await message.answer("‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                await show_updated_settings(message, user_id, state)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞")
                await state.clear()
        else:
            await message.answer("‚ùå –¢—Ä–µ–π–ª–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        await state.clear()

@router.message(SettingsState.waiting_for_drawdown)
async def process_drawdown(message: Message, state: FSMContext):
    try:
        drawdown = int(message.text)
        user_id = message.from_user.id
        
        if 1 <= drawdown <= 100:
            if db.update_user_settings(user_id, {"max_drawdown_pct": drawdown}):
                await message.answer("‚úÖ –ü—Ä–æ—Å–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                await show_updated_settings(message, user_id, state)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–∞–¥–∫–∏")
                await state.clear()
        else:
            await message.answer("‚ùå –ü—Ä–æ—Å–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100%")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        await state.clear()

async def show_updated_settings(message: Message, user_id: int, state: FSMContext):
    profile = db.get_user_profile(user_id)
    await state.clear()
    
    if not profile:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return
    
    settings = profile['settings']
    text = (
        f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"üìà –°–∏–º–≤–æ–ª: {settings['symbol']}\n"
        f"üí∞ –õ–æ—Ç: {settings['lot']}\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {settings['distance_pips']}\n"
        f"üéØ –¢—Ä–µ–π–ª–∏–Ω–≥: {settings['trailing_distance']}\n"
        f"‚ö†Ô∏è –ü—Ä–æ—Å–∞–¥–∫–∞: {settings['max_drawdown_pct']}%"
    )
    
    await message.answer(text, reply_markup=get_settings_keyboard())

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_inline_keyboard())
    await callback.answer()

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_profile(callback)