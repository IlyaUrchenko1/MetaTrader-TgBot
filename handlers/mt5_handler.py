import MetaTrader5 as mt5
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from keyboards.keyboards import get_main_inline_keyboard, get_back_keyboard, get_orders_keyboard, get_settings_keyboard, get_profile_keyboard, get_symbols_keyboard, get_back_keyboard_profile
from utils.database import Database
from mt5_functions.trading_service import TradingService
from utils.constants import ADMIN_IDS
from mt5_functions.mt5_api import get_orders, get_positions

router = Router()
db = Database()
trading_service = TradingService()

class GridState(StatesGroup):
    grid_active = State()

@router.callback_query(F.data == "start_grid")
async def cmd_start_grid(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await callback.answer()
        return

    await callback.message.edit_text("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ç–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    mt5.initialize()
    
    user_id = callback.from_user.id
    user_profile = db.get_user_profile(user_id)
    
    if not user_profile:
        db.add_user(user_id, callback.from_user.username, callback.from_user.full_name)
        user_profile = db.get_user_profile(user_id)
    
    user_settings = user_profile.get("settings", {})
    if not user_settings:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=get_main_inline_keyboard())
        await callback.answer()
        return
        
    symbol = user_settings.get("symbol")
    distance_pips = user_settings.get("distance_pips")
    lot = user_settings.get("lot")
    
    if not all([symbol, isinstance(distance_pips, (int, float)), isinstance(lot, (int, float))]):
         await callback.message.edit_text(
             f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏ –∑–∞–¥–∞–Ω—ã.\n" 
             f"–¢—Ä–µ–±—É–µ—Ç—Å—è: –°–∏–º–≤–æ–ª ({symbol}), –î–∏—Å—Ç–∞–Ω—Ü–∏—è ({distance_pips}), –õ–æ—Ç ({lot}).\n"
             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
             reply_markup=get_settings_keyboard()
         )
         await callback.answer()
         return

    magic_number = user_id + 1000
    
    await state.update_data(
        grid_symbol=symbol,
        grid_distance=distance_pips,
        grid_lot=lot,
        grid_magic=magic_number
    )
    
    await callback.message.edit_text(
        f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏:\n"
        f"–°–∏–º–≤–æ–ª: {symbol}\n"
        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_pips} –ø–∏–ø—Å–æ–≤\n"
        f"–õ–æ—Ç: {lot}\n"
        f"Magic Number: {magic_number}\n\n"
        f"‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É..."
    )
    
    success, result_message = trading_service.place_initial_grid(
        symbol=symbol,
        distance_pips=int(distance_pips),
        lot=float(lot),
        percent=0.0,
        magic_number=magic_number
    )
    
    await callback.message.edit_text(result_message)
    
    if success:
        await callback.message.answer("‚úÖ –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /grid_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ /stop_grid –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", reply_markup=get_main_inline_keyboard())
        await state.set_state(GridState.grid_active)
    else:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ç–∫—É. –ü—Ä–∏—á–∏–Ω–∞: {result_message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=get_main_inline_keyboard())
        await state.clear()
    
    await callback.answer()

@router.callback_query(F.data == "status")
async def check_status(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await callback.answer()
        return
    
    current_state = await state.get_state()
    if current_state != GridState.grid_active:
        await callback.message.answer("–°–µ—Ç–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–û—Ç–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É'.", reply_markup=get_main_inline_keyboard())
        await callback.answer()
        return
    
    user_data = await state.get_data()
    symbol = user_data.get('grid_symbol')
    magic = user_data.get('grid_magic')

    if not symbol or not magic:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ '–û—Ç–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É'.", reply_markup=get_main_inline_keyboard())
        await state.clear()
        await callback.answer()
        return

    await callback.message.edit_text(f"‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∫–∏ {symbol} / {magic}...")

    status_result = trading_service.get_grid_status(symbol, magic)

    if not status_result["success"]:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {status_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=get_back_keyboard())
        await callback.answer()
        return

    orders = status_result.get("orders", [])
    positions = status_result.get("positions", [])

    report = f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∫–∏ ({symbol} / Magic: {magic})\n\n"

    if not orders and not positions:
        report += "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ —ç—Ç–æ–π —Å–µ—Ç–∫–µ –Ω–µ—Ç."
    else:
        if positions:
            report += "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
            total_profit = 0.0
            for pos in positions:
                report += f" - –¢–∏–∫–µ—Ç: {pos['ticket']}, –¢–∏–ø: {pos['type']}, –õ–æ—Ç: {pos['volume']}, –¶–µ–Ω–∞: {pos['price_open']}, Profit: {pos['profit']:.2f}\n"
                total_profit += pos['profit']
            report += f"\nüí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –ø–æ–∑–∏—Ü–∏–π: {total_profit:.2f}\n\n"
        else:
            report += "‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.\n\n"
            
        if orders:
            report += "‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:\n"
            for order in orders:
                report += f" - –¢–∏–∫–µ—Ç: {order['ticket']}, –¢–∏–ø: {order['type']}, –õ–æ—Ç: {order['volume_initial']}, –¶–µ–Ω–∞: {order['price_open']}\n"
        else:
            report += "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç.\n"

    await callback.message.edit_text(report, reply_markup=get_orders_keyboard(orders, positions))
    await callback.answer()

@router.callback_query(F.data == "show_orders")
async def show_orders(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    symbol = user_data.get('grid_symbol')
    magic = user_data.get('grid_magic')
    
    if not symbol or not magic:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏.", reply_markup=get_main_inline_keyboard())
        await callback.answer()
        return
    
    await callback.message.edit_text(f"‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} / {magic}...")
    
    orders_result = get_orders(symbol=symbol, magic=magic)
    
    if not orders_result["success"]:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {orders_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=get_back_keyboard())
        await callback.answer()
        return
    
    orders = orders_result.get("data", [])
    
    positions_result = get_positions(symbol=symbol, magic=magic)
    positions = positions_result.get("data", []) if positions_result["success"] else []
        
    if not orders:
        await callback.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.", reply_markup=get_orders_keyboard([], positions))
        await callback.answer()
        return
        
    report = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:\n\n"
    for order in orders:
        report += f"–¢–∏–∫–µ—Ç: {order['ticket']}\n–¢–∏–ø: {order['type']}\n–°–∏–º–≤–æ–ª: {order['symbol']}\n–õ–æ—Ç: {order['volume_initial']}\n–¶–µ–Ω–∞: {order['price_open']}\n\n"
        
    await callback.message.edit_text(report, reply_markup=get_orders_keyboard(orders, positions))
    await callback.answer()

@router.callback_query(F.data == "show_positions")
async def show_positions(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    symbol = user_data.get('grid_symbol')
    magic = user_data.get('grid_magic')
    
    if not symbol or not magic:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏.", reply_markup=get_main_inline_keyboard())
        await callback.answer()
        return
    
    await callback.message.edit_text(f"‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {symbol} / {magic}...")
    
    positions_result = get_positions(symbol=symbol, magic=magic)
    
    if not positions_result["success"]:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {positions_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=get_back_keyboard())
        await callback.answer()
        return
    
    positions = positions_result.get("data", [])
    
    orders_result = get_orders(symbol=symbol, magic=magic)
    orders = orders_result.get("data", []) if orders_result["success"] else []
        
    if not positions:
        await callback.message.edit_text("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.", reply_markup=get_orders_keyboard(orders, []))
        await callback.answer()
        return
        
    report = "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n"
    total_profit = 0.0
    for pos in positions:
        report += f"–¢–∏–∫–µ—Ç: {pos['ticket']}\n–¢–∏–ø: {pos['type']}\n–°–∏–º–≤–æ–ª: {pos['symbol']}\n–õ–æ—Ç: {pos['volume']}\n–¶–µ–Ω–∞: {pos['price_open']}\n–ü—Ä–æ—Ñ–∏—Ç: {pos['profit']:.2f}\n\n"
        total_profit += pos['profit']
    report += f"\nüí∞ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_profit:.2f}"

    await callback.message.edit_text(report, reply_markup=get_orders_keyboard(orders, positions))
    await callback.answer()

@router.callback_query(F.data == "close_all")
async def close_all(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    symbol = user_data.get('grid_symbol')
    magic = user_data.get('grid_magic')
    
    if not symbol or not magic:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏.", reply_markup=get_main_inline_keyboard())
        await callback.answer()
        return
    
    await callback.message.edit_text(f"‚è≥ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} / {magic}...")
    
    try:
        success, result_message, details_log = trading_service.close_grid(symbol, magic)
        
        full_message = f"{result_message}\n\n"
        if details_log:
            full_message += "–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(details_log)
            if len(full_message) > 4000:
                full_message = full_message[:4000] + "... (–ª–æ–≥ —É—Å–µ—á–µ–Ω)"

        await callback.message.edit_text(full_message, reply_markup=get_main_inline_keyboard())
        
        if success:
            await state.clear()
            await callback.message.answer("–°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
        else:
             await callback.message.answer("–í–æ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ç–∫–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –≤—ã—à–µ.")

    except Exception as e:
        await callback.message.edit_text(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ç–∫–∏: {e}", reply_markup=get_back_keyboard())
    
    await callback.answer()

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=get_settings_keyboard())
    await callback.answer()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_profile = db.get_user_profile(user_id)
    if not user_profile:
        db.add_user(user_id, callback.from_user.username, callback.from_user.full_name)
        user_profile = db.get_user_profile(user_id)
    
    profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\nID: {user_id}\n–ò–º—è: {callback.from_user.full_name}"
    settings = user_profile.get('settings', {})
    profile_text += f"\n\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏:\n–°–∏–º–≤–æ–ª: {settings.get('symbol', '–ù–µ –∑–∞–¥–∞–Ω')}\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {settings.get('distance_pips', '–ù–µ –∑–∞–¥–∞–Ω–∞')} –ø–∏–ø—Å–æ–≤\n–õ–æ—Ç: {settings.get('lot', '–ù–µ –∑–∞–¥–∞–Ω')}"
    
    await callback.message.edit_text(profile_text, reply_markup=get_profile_keyboard())
    await callback.answer()

@router.callback_query(F.data == "select_symbol")
async def select_symbol(callback: CallbackQuery, state: FSMContext):
    symbols_data = trading_service.get_available_symbols()
    if not symbols_data:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç MT5.", reply_markup=get_settings_keyboard())
        await callback.answer()
        return
        
    symbol_names = [s['name'] for s in symbols_data]
    await callback.message.edit_text("üìà –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª:", reply_markup=get_symbols_keyboard(symbol_names))
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_inline_keyboard())
    await callback.answer()

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, state: FSMContext):
    await show_profile(callback, state)

@router.callback_query(F.data.startswith("symbol_"))
async def handle_symbol_selection(callback: CallbackQuery, state: FSMContext):
    symbol = callback.data.split("symbol_", 1)[1]
    user_id = callback.from_user.id

    is_tradable, message = trading_service.select_symbol(symbol)
    if not is_tradable:
         await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {message}", reply_markup=get_settings_keyboard())
         await callback.answer()
         return

    try:
        db.update_user_setting(user_id, "symbol", symbol)
        await callback.message.edit_text(f"‚úÖ –°–∏–º–≤–æ–ª {symbol} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_settings_keyboard())
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –≤ –ë–î: {e}", reply_markup=get_settings_keyboard())
        
    await callback.answer()